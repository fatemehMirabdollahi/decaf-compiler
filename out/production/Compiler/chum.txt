
// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class DecafScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int SPECIAL = 2;
  public static final int STRING = 4;
  public static final int CHARACTER = 6;
  public static final int ENDOFCHAR = 8;
  public static final int SPACE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\2\6\1\11\1\12"+
    "\1\6\1\13\1\14\1\15\1\16\11\17\1\0\1\6"+
    "\1\4\1\20\1\4\2\0\1\21\3\22\1\23\1\22"+
    "\2\24\1\25\2\24\1\26\1\24\1\27\1\24\1\30"+
    "\1\24\1\31\5\24\1\32\2\24\1\6\1\33\2\6"+
    "\1\34\1\0\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\24\1\46\1\47\1\24\1\50"+
    "\1\51\2\24\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\32\1\60\1\24\1\0\1\61\10\0\1\1\32\0"+
    "\1\1\u01df\0\1\1\177\0\13\1\35\0\2\1\5\0"+
    "\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] 1.321312 ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\2\3\1\4\1\5\2\4\1\6" +
    "\3\4\2\7\1\1\20\10\1\4\1\11\1\12\1\11" +
    "\2\13\1\14\1\15\4\16\1\0\1\17\1\0\1\20" +
    "\1\21\1\0\13\10\1\22\7\10\1\23\1\24\1\25" +
    "\1\15\1\25\1\0\2\20\1\0\1\7\12\10\1\22" +
    "\5\10\1\26\1\0\1\21\4\10\1\22\11\10\1\22" +
    "\14\10\1\22\5\10\1\22\6\10\1\22\24\10"

  private static int [] zzUnpackAction() {
    int [] result = new int[165]
    int offset = 0;
    offset = zzUnpackAction  ( ZZ_ACTION_PACKED_0, offset, result)
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();