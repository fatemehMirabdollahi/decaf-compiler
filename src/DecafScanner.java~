// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: Scanner.flex




// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class DecafScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int SPECIAL = 2;
  public static final int STRING = 4;
  public static final int CHARACTER = 6;
  public static final int ENDOFCHAR = 8;
  public static final int SPACE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\2\6\1\11\1\12"+
    "\1\6\1\13\1\14\1\15\1\16\11\17\1\0\1\6"+
    "\1\4\1\20\1\4\2\0\1\21\3\22\1\23\1\22"+
    "\2\24\1\25\2\24\1\26\1\24\1\27\1\24\1\30"+
    "\1\24\1\31\5\24\1\32\2\24\1\6\1\33\2\6"+
    "\1\34\1\0\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\24\1\46\1\47\1\24\1\50"+
    "\1\51\2\24\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\32\1\60\1\24\1\0\1\61\10\0\1\1\32\0"+
    "\1\1\u01df\0\1\1\177\0\13\1\35\0\2\1\5\0"+
    "\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\2\3\1\5\3\3"+
    "\2\6\1\1\20\7\1\3\1\10\1\11\1\10\2\12"+
    "\1\13\1\14\4\15\1\0\1\16\1\0\1\17\1\20"+
    "\1\0\13\7\1\21\7\7\1\22\1\23\1\14\1\0"+
    "\2\17\1\0\1\6\12\7\1\21\5\7\1\24\1\0"+
    "\1\20\4\7\1\21\11\7\1\21\14\7\1\21\5\7"+
    "\1\21\6\7\1\21\24\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u015e\0\u0190\0\u01c2\0\u015e\0\u015e\0\u01f4\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u01c2\0\u0352\0\u0384\0\u03b6"+
    "\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546"+
    "\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u015e\0\u015e"+
    "\0\u06a4\0\u015e\0\u06d6\0\u015e\0\u0708\0\u015e\0\u073a\0\u076c"+
    "\0\u079e\0\u0226\0\u015e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0898\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u015e\0\u015e\0\u076c\0\u0c1c\0\u015e\0\u0c4e"+
    "\0\u0c80\0\u0866\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0cb2\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\u0f3c\0\u0f6e\0\u015e\0\u0fa0\0\u0fa0\0\u0fd2\0\u1004\0\u1036"+
    "\0\u1068\0\u0fd2\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\u11c6\0\u11f8\0\u122a\0\u11f8\0\u125c\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482"+
    "\0\u13ba\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u157c\0\u15ae"+
    "\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c"+
    "\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\u1a5e\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\13\1\20\1\21\1\15\1\22\1\23\1\24\1\25"+
    "\6\26\1\27\1\30\1\31\1\26\2\10\1\26\1\32"+
    "\1\33\1\34\1\35\1\36\2\26\1\37\2\26\1\40"+
    "\1\26\1\41\1\42\1\43\1\26\1\44\1\45\1\26"+
    "\1\46\1\10\2\11\1\12\56\10\2\47\1\11\1\12"+
    "\1\47\1\50\25\47\1\51\26\47\2\52\1\11\1\12"+
    "\27\52\1\53\26\52\1\10\2\11\1\12\4\10\1\54"+
    "\51\10\1\55\2\56\1\57\57\55\1\56\1\60\1\61"+
    "\56\55\64\0\1\11\77\0\1\15\50\0\1\15\52\0"+
    "\10\62\1\63\51\62\12\0\1\15\5\0\1\15\54\0"+
    "\1\15\4\0\1\15\52\0\1\64\3\0\1\65\2\0"+
    "\1\15\55\0\1\66\1\0\2\24\12\0\1\67\43\0"+
    "\1\66\1\0\2\24\60\0\2\70\1\0\12\70\1\0"+
    "\25\70\17\0\2\70\1\0\12\70\1\0\5\70\1\71"+
    "\17\70\17\0\2\70\1\0\12\70\1\0\16\70\1\72"+
    "\6\70\17\0\2\70\1\0\12\70\1\0\5\70\1\73"+
    "\17\70\17\0\2\70\1\0\12\70\1\0\15\70\1\74"+
    "\1\75\6\70\17\0\2\70\1\0\12\70\1\0\15\70"+
    "\1\76\7\70\17\0\2\70\1\0\12\70\1\0\15\70"+
    "\1\77\7\70\17\0\2\70\1\0\12\70\1\0\13\70"+
    "\1\100\11\70\17\0\2\70\1\0\12\70\1\0\1\70"+
    "\1\101\13\70\1\102\7\70\17\0\2\70\1\0\12\70"+
    "\1\0\6\70\1\103\5\70\1\104\10\70\17\0\2\70"+
    "\1\0\12\70\1\0\5\70\1\105\17\70\17\0\2\70"+
    "\1\0\12\70\1\0\5\70\1\106\17\70\17\0\2\70"+
    "\1\0\12\70\1\0\20\70\1\107\4\70\17\0\2\70"+
    "\1\0\12\70\1\0\16\70\1\110\6\70\17\0\2\70"+
    "\1\0\12\70\1\0\15\70\1\111\7\70\17\0\2\70"+
    "\1\0\12\70\1\0\10\70\1\112\14\70\62\0\1\15"+
    "\36\0\1\113\1\0\1\113\7\0\1\113\1\0\1\113"+
    "\1\0\1\113\43\0\1\114\1\0\1\114\7\0\1\114"+
    "\1\0\1\114\1\0\1\114\5\0\1\55\3\0\56\55"+
    "\2\0\1\56\61\0\2\115\60\0\1\60\1\115\56\0"+
    "\11\64\1\116\50\64\2\65\1\117\1\120\56\65\16\0"+
    "\2\66\3\0\1\121\54\0\2\122\1\0\3\122\11\0"+
    "\6\122\35\0\2\123\1\0\12\123\1\0\25\123\17\0"+
    "\2\123\1\0\12\123\1\0\23\123\1\124\1\123\17\0"+
    "\2\123\1\0\12\123\1\0\11\123\1\125\13\123\17\0"+
    "\2\123\1\0\12\123\1\0\1\123\1\126\23\123\17\0"+
    "\2\123\1\0\12\123\1\0\15\123\1\127\7\123\17\0"+
    "\2\123\1\0\12\123\1\0\5\123\1\130\17\123\17\0"+
    "\2\123\1\0\12\123\1\0\14\123\1\131\10\123\17\0"+
    "\2\123\1\0\12\123\1\0\21\123\1\132\3\123\17\0"+
    "\2\123\1\0\12\123\1\0\17\123\1\133\5\123\17\0"+
    "\2\123\1\0\12\123\1\0\13\123\1\134\11\123\17\0"+
    "\2\123\1\0\12\123\1\0\16\123\1\135\6\123\17\0"+
    "\2\123\1\0\12\123\1\0\20\123\1\135\4\123\17\0"+
    "\2\123\1\0\12\123\1\0\23\123\1\135\1\123\17\0"+
    "\2\123\1\0\12\123\1\0\3\123\1\136\14\123\1\137"+
    "\4\123\17\0\2\123\1\0\12\123\1\0\16\123\1\140"+
    "\6\123\17\0\2\123\1\0\12\123\1\0\21\123\1\133"+
    "\3\123\17\0\2\123\1\0\12\123\1\0\11\123\1\141"+
    "\13\123\17\0\2\123\1\0\12\123\1\0\11\123\1\142"+
    "\13\123\1\0\11\64\1\116\3\64\1\143\44\64\2\0"+
    "\1\117\71\0\2\144\2\0\2\145\60\0\2\146\1\0"+
    "\12\146\1\0\25\146\17\0\2\146\1\0\1\147\11\146"+
    "\1\0\25\146\17\0\2\146\1\0\12\146\1\0\14\146"+
    "\1\150\10\146\17\0\2\146\1\0\12\146\1\0\4\146"+
    "\1\151\20\146\17\0\2\146\1\0\12\146\1\0\13\146"+
    "\1\152\11\146\17\0\2\146\1\0\12\146\1\0\1\146"+
    "\1\153\23\146\17\0\2\146\1\0\12\146\1\0\20\146"+
    "\1\154\4\146\17\0\2\146\1\0\12\146\1\0\2\146"+
    "\1\155\22\146\17\0\2\146\1\0\12\146\1\0\5\146"+
    "\1\152\17\146\17\0\2\146\1\0\12\146\1\0\17\146"+
    "\1\156\5\146\17\0\2\146\1\0\12\146\1\0\15\146"+
    "\1\157\7\146\17\0\2\146\1\0\12\146\1\0\21\146"+
    "\1\160\3\146\17\0\2\146\1\0\12\146\1\0\11\146"+
    "\1\161\13\146\17\0\2\146\1\0\12\146\1\0\4\146"+
    "\1\152\20\146\17\0\2\146\1\0\12\146\1\0\13\146"+
    "\1\156\11\146\17\0\2\145\60\0\2\162\1\0\12\162"+
    "\1\0\25\162\17\0\2\162\1\0\12\162\1\0\16\162"+
    "\1\163\6\162\17\0\2\162\1\0\12\162\1\0\20\162"+
    "\1\164\4\162\17\0\2\162\1\0\4\162\1\165\1\166"+
    "\4\162\1\0\25\162\17\0\2\162\1\0\12\162\1\0"+
    "\12\162\1\164\12\162\17\0\2\162\1\0\12\162\1\0"+
    "\11\162\1\167\13\162\17\0\2\162\1\0\12\162\1\0"+
    "\13\162\1\170\11\162\17\0\2\162\1\0\12\162\1\0"+
    "\5\162\1\164\17\162\17\0\2\162\1\0\12\162\1\0"+
    "\16\162\1\171\6\162\17\0\2\162\1\0\12\162\1\0"+
    "\16\162\1\172\6\162\17\0\2\162\1\0\12\162\1\0"+
    "\14\162\1\173\10\162\17\0\2\174\1\0\12\174\1\0"+
    "\25\174\17\0\2\174\1\0\12\174\1\0\16\174\1\175"+
    "\6\174\17\0\2\174\1\0\12\174\1\0\14\174\1\176"+
    "\10\174\17\0\2\174\1\0\12\174\1\0\11\174\1\177"+
    "\13\174\17\0\2\174\1\0\12\174\1\0\14\174\1\200"+
    "\10\174\17\0\2\174\1\0\12\174\1\0\5\174\1\201"+
    "\17\174\17\0\2\174\1\0\12\174\1\0\4\174\1\201"+
    "\20\174\17\0\2\174\1\0\12\174\1\0\14\174\1\201"+
    "\10\174\17\0\2\174\1\0\12\174\1\0\7\174\1\201"+
    "\15\174\17\0\2\202\1\0\12\202\1\0\25\202\17\0"+
    "\2\202\1\0\12\202\1\0\1\202\1\203\23\202\17\0"+
    "\2\202\1\0\12\202\1\0\20\202\1\204\4\202\17\0"+
    "\2\202\1\0\12\202\1\0\14\202\1\205\10\202\17\0"+
    "\2\202\1\0\12\202\1\0\21\202\1\205\3\202\17\0"+
    "\2\206\1\0\12\206\1\0\25\206\17\0\2\206\1\0"+
    "\12\206\1\0\24\206\1\207\17\0\2\206\1\0\12\206"+
    "\1\0\5\206\1\210\17\206\17\0\2\206\1\0\12\206"+
    "\1\0\5\206\1\207\17\206\17\0\2\211\1\0\12\211"+
    "\1\0\25\211\17\0\2\211\1\0\12\211\1\0\7\211"+
    "\1\212\15\211\17\0\2\213\1\0\12\213\1\0\25\213"+
    "\17\0\2\213\1\0\12\213\1\0\5\213\1\214\17\213"+
    "\17\0\2\215\1\0\12\215\1\0\25\215\17\0\2\215"+
    "\1\0\12\215\1\0\16\215\1\216\6\215\17\0\2\217"+
    "\1\0\12\217\1\0\25\217\17\0\2\220\1\0\12\220"+
    "\1\0\25\220\17\0\2\221\1\0\12\221\1\0\25\221"+
    "\17\0\2\222\1\0\12\222\1\0\25\222\17\0\2\223"+
    "\1\0\12\223\1\0\25\223\17\0\2\224\1\0\12\224"+
    "\1\0\25\224\17\0\2\225\1\0\12\225\1\0\25\225"+
    "\17\0\2\226\1\0\12\226\1\0\25\226\17\0\2\227"+
    "\1\0\12\227\1\0\25\227\17\0\2\230\1\0\12\230"+
    "\1\0\25\230\17\0\2\231\1\0\12\231\1\0\25\231"+
    "\17\0\2\232\1\0\12\232\1\0\25\232\17\0\2\233"+
    "\1\0\12\233\1\0\25\233\17\0\2\234\1\0\12\234"+
    "\1\0\25\234\17\0\2\235\1\0\12\235\1\0\25\235"+
    "\17\0\2\236\1\0\12\236\1\0\25\236\17\0\2\237"+
    "\1\0\12\237\1\0\25\237\17\0\2\240\1\0\12\240"+
    "\1\0\25\240\17\0\2\241\1\0\12\241\1\0\25\241"+
    "\17\0\2\242\1\0\12\242\1\0\25\242\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\2\1\2\11\31\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\3\1\1\0\1\11\1\0"+
    "\2\1\1\0\23\1\2\11\1\1\1\0\1\11\1\1"+
    "\1\0\21\1\1\11\1\0\75\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
String myString = "";
String myCharacter = "";
Token token ;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DecafScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token tokenReader() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case SPACE: {
              yybegin(YYINITIAL); return token;
            }  // fall though
            case 163: break;
            default:
              {
                return new Token("$");
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL);return new Token(yytext(),Type.undefind);
            }
            // fall through
          case 21: break;
          case 2:
            { yybegin(YYINITIAL);/*return new Token(yytext(),Type.undefind);*/
            }
            // fall through
          case 22: break;
          case 3:
            { yybegin(SPACE);token = new Token(yytext(),Type.op_punc);
            }
            // fall through
          case 23: break;
          case 4:
            { yybegin(STRING);myString="\"";
            }
            // fall through
          case 24: break;
          case 5:
            { yybegin(CHARACTER);myCharacter="\'";
            }
            // fall through
          case 25: break;
          case 6:
            { yybegin(SPACE);token = new Token(yytext(),Type.integer);
            }
            // fall through
          case 26: break;
          case 7:
            { yybegin(SPACE);token = new Token(yytext(),Type.id);
            }
            // fall through
          case 27: break;
          case 8:
            { myString+=yytext();
            }
            // fall through
          case 28: break;
          case 9:
            { yybegin(SPACE); myString+="\""  ;token = new Token(myString,Type.str_char);
            }
            // fall through
          case 29: break;
          case 10:
            { myCharacter+=yytext();yybegin(ENDOFCHAR);
            }
            // fall through
          case 30: break;
          case 11:
            { yybegin(SPACE);myCharacter +="\'";  token = new Token(myCharacter,Type.str_char);
            }
            // fall through
          case 31: break;
          case 12:
            { yybegin(YYINITIAL);System.out.println("hii");return new Token(token.getValue()+yytext(),Type.undefind);
            }
            // fall through
          case 32: break;
          case 13:
            { yybegin(YYINITIAL); return token;
            }
            // fall through
          case 33: break;
          case 14:
            { return new Token(yytext(),Type.undefind);
            }
            // fall through
          case 34: break;
          case 15:
            { yybegin(YYINITIAL);return new Token(yytext(),Type.comment);
            }
            // fall through
          case 35: break;
          case 16:
            { yybegin(SPACE);token = new Token(yytext(),Type.real);
            }
            // fall through
          case 36: break;
          case 17:
            { yybegin(SPACE);token = new Token(yytext(),Type.keyword);
            }
            // fall through
          case 37: break;
          case 18:
            { myString+="<i>"+yytext()+"</i>";
            }
            // fall through
          case 38: break;
          case 19:
            { myCharacter+="<i>"+yytext()+"</i>";yybegin(ENDOFCHAR);
            }
            // fall through
          case 39: break;
          case 20:
            { yybegin(SPACE);token = new Token(yytext(),Type.comment);
            }
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java DecafScanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        DecafScanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new DecafScanner(reader);
          while ( !scanner.zzAtEOF ) scanner.tokenReader();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
