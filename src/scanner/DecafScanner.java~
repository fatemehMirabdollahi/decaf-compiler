// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: Scanner.flex
package scanner;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class DecafScanner {

    /**
     * This character denotes the end of file.
     */
    public static final int YYEOF = -1;

    /**
     * Initial size of the lookahead buffer.
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    // Lexical states.
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4" +
                    "\1\5\2\0\1\6\1\7\1\10\2\6\1\11\1\12" +
                    "\1\6\1\13\1\14\1\15\12\16\2\6\1\4\1\17" +
                    "\1\4\2\0\1\20\7\21\1\22\2\21\1\23\1\21" +
                    "\1\24\1\21\1\25\1\21\1\26\10\21\1\6\1\27" +
                    "\2\6\1\30\1\0\1\31\1\32\1\33\1\34\1\35" +
                    "\1\36\1\37\1\40\1\41\1\21\1\42\1\43\1\21" +
                    "\1\44\1\45\2\21\1\46\1\47\1\50\1\51\1\52" +
                    "\1\53\1\21\1\54\1\21\1\6\1\55\1\6\7\0" +
                    "\1\1\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0" +
                    "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[1280];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\1\1\1\2\2\3\1\4\1\5\2\4\1\1" +
                    "\3\4\1\6\20\7\1\4\1\10\1\11\1\10\2\0" +
                    "\1\12\2\0\1\13\1\14\13\7\1\15\7\7\1\16" +
                    "\1\12\1\0\1\16\1\0\2\13\12\7\1\15\5\7" +
                    "\1\17\1\20\4\7\1\15\11\7\1\15\14\7\1\15" +
                    "\5\7\1\15\6\7\1\15\24\7";

    private static int[] zzUnpackAction() {
        int[] result = new int[147];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\56\0\134\0\134\0\134\0\212\0\270\0\134" +
                    "\0\134\0\346\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa" +
                    "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a" +
                    "\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da" +
                    "\0\134\0\134\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee" +
                    "\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e" +
                    "\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0678\0\u0872\0\u08a0" +
                    "\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\134\0\134\0\u09b4" +
                    "\0\u09e2\0\u0a10\0\134\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6" +
                    "\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0a6c\0\u0c38" +
                    "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\134\0\134\0\u0d1e\0\u0d4c" +
                    "\0\u0d7a\0\u0da8\0\u0d1e\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e" +
                    "\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f18\0\u0f74\0\u0fa2\0\u0fd0" +
                    "\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140" +
                    "\0\u116e\0\u10b6\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1254" +
                    "\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1368\0\u1396" +
                    "\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506" +
                    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676" +
                    "\0\u16a4\0\u16d2\0\134";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[147];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12" +
                    "\1\13\1\7\1\14\1\15\1\11\1\16\1\17\1\7" +
                    "\4\20\1\21\1\22\1\23\2\3\1\20\1\24\1\25" +
                    "\1\26\1\27\1\30\2\20\1\31\2\20\1\32\1\20" +
                    "\1\33\1\34\1\35\1\20\1\36\1\37\1\20\1\40" +
                    "\2\41\1\5\1\6\1\41\1\42\21\41\1\43\26\41" +
                    "\60\0\1\5\72\0\1\11\45\0\1\11\46\0\2\44" +
                    "\2\45\4\44\1\46\16\44\1\47\26\44\12\0\1\11" +
                    "\4\0\1\11\51\0\1\11\3\0\1\11\47\0\1\50" +
                    "\3\0\1\51\1\0\1\11\52\0\1\52\1\0\1\17" +
                    "\55\0\1\53\1\0\7\53\1\0\25\53\17\0\1\53" +
                    "\1\0\7\53\1\0\5\53\1\54\17\53\17\0\1\53" +
                    "\1\0\7\53\1\0\16\53\1\55\6\53\17\0\1\53" +
                    "\1\0\7\53\1\0\5\53\1\56\17\53\17\0\1\53" +
                    "\1\0\7\53\1\0\15\53\1\57\1\60\6\53\17\0" +
                    "\1\53\1\0\7\53\1\0\15\53\1\61\7\53\17\0" +
                    "\1\53\1\0\7\53\1\0\15\53\1\62\7\53\17\0" +
                    "\1\53\1\0\7\53\1\0\13\53\1\63\11\53\17\0" +
                    "\1\53\1\0\7\53\1\0\1\53\1\64\13\53\1\65" +
                    "\7\53\17\0\1\53\1\0\7\53\1\0\6\53\1\66" +
                    "\5\53\1\67\10\53\17\0\1\53\1\0\7\53\1\0" +
                    "\5\53\1\70\17\53\17\0\1\53\1\0\7\53\1\0" +
                    "\5\53\1\71\17\53\17\0\1\53\1\0\7\53\1\0" +
                    "\20\53\1\72\4\53\17\0\1\53\1\0\7\53\1\0" +
                    "\16\53\1\73\6\53\17\0\1\53\1\0\7\53\1\0" +
                    "\15\53\1\74\7\53\17\0\1\53\1\0\7\53\1\0" +
                    "\10\53\1\75\14\53\56\0\1\11\5\0\1\41\2\0" +
                    "\1\41\21\0\1\41\1\0\1\41\7\0\1\41\1\0" +
                    "\1\41\1\0\1\41\5\0\10\45\1\76\55\45\1\77" +
                    "\45\45\10\0\1\76\45\0\5\45\1\100\2\45\1\101" +
                    "\21\45\1\100\1\45\1\100\7\45\1\100\1\45\1\100" +
                    "\1\45\1\100\5\45\11\50\1\102\44\50\2\51\1\103" +
                    "\1\104\52\51\16\0\1\52\55\0\1\105\1\0\7\105" +
                    "\1\0\25\105\17\0\1\105\1\0\7\105\1\0\23\105" +
                    "\1\106\1\105\17\0\1\105\1\0\7\105\1\0\11\105" +
                    "\1\107\13\105\17\0\1\105\1\0\7\105\1\0\1\105" +
                    "\1\110\23\105\17\0\1\105\1\0\7\105\1\0\15\105" +
                    "\1\111\7\105\17\0\1\105\1\0\7\105\1\0\5\105" +
                    "\1\112\17\105\17\0\1\105\1\0\7\105\1\0\14\105" +
                    "\1\113\10\105\17\0\1\105\1\0\7\105\1\0\21\105" +
                    "\1\114\3\105\17\0\1\105\1\0\7\105\1\0\17\105" +
                    "\1\115\5\105\17\0\1\105\1\0\7\105\1\0\13\105" +
                    "\1\116\11\105\17\0\1\105\1\0\7\105\1\0\16\105" +
                    "\1\117\6\105\17\0\1\105\1\0\7\105\1\0\20\105" +
                    "\1\117\4\105\17\0\1\105\1\0\7\105\1\0\23\105" +
                    "\1\117\1\105\17\0\1\105\1\0\7\105\1\0\3\105" +
                    "\1\120\14\105\1\121\4\105\17\0\1\105\1\0\7\105" +
                    "\1\0\16\105\1\122\6\105\17\0\1\105\1\0\7\105" +
                    "\1\0\21\105\1\115\3\105\17\0\1\105\1\0\7\105" +
                    "\1\0\11\105\1\123\13\105\17\0\1\105\1\0\7\105" +
                    "\1\0\11\105\1\124\13\105\1\0\10\45\1\125\45\45" +
                    "\10\0\1\125\45\0\11\50\1\102\3\50\1\126\40\50" +
                    "\2\0\1\103\71\0\1\127\1\0\7\127\1\0\25\127" +
                    "\17\0\1\127\1\0\1\130\6\127\1\0\25\127\17\0" +
                    "\1\127\1\0\7\127\1\0\14\127\1\131\10\127\17\0" +
                    "\1\127\1\0\7\127\1\0\4\127\1\132\20\127\17\0" +
                    "\1\127\1\0\7\127\1\0\13\127\1\133\11\127\17\0" +
                    "\1\127\1\0\7\127\1\0\1\127\1\134\23\127\17\0" +
                    "\1\127\1\0\7\127\1\0\20\127\1\135\4\127\17\0" +
                    "\1\127\1\0\7\127\1\0\2\127\1\136\22\127\17\0" +
                    "\1\127\1\0\7\127\1\0\5\127\1\133\17\127\17\0" +
                    "\1\127\1\0\7\127\1\0\17\127\1\137\5\127\17\0" +
                    "\1\127\1\0\7\127\1\0\15\127\1\140\7\127\17\0" +
                    "\1\127\1\0\7\127\1\0\21\127\1\141\3\127\17\0" +
                    "\1\127\1\0\7\127\1\0\11\127\1\142\13\127\17\0" +
                    "\1\127\1\0\7\127\1\0\4\127\1\133\20\127\17\0" +
                    "\1\127\1\0\7\127\1\0\13\127\1\137\11\127\17\0" +
                    "\1\143\1\0\7\143\1\0\25\143\17\0\1\143\1\0" +
                    "\7\143\1\0\16\143\1\144\6\143\17\0\1\143\1\0" +
                    "\7\143\1\0\20\143\1\145\4\143\17\0\1\143\1\0" +
                    "\2\143\1\146\1\147\3\143\1\0\25\143\17\0\1\143" +
                    "\1\0\7\143\1\0\12\143\1\145\12\143\17\0\1\143" +
                    "\1\0\7\143\1\0\11\143\1\150\13\143\17\0\1\143" +
                    "\1\0\7\143\1\0\13\143\1\151\11\143\17\0\1\143" +
                    "\1\0\7\143\1\0\5\143\1\145\17\143\17\0\1\143" +
                    "\1\0\7\143\1\0\16\143\1\152\6\143\17\0\1\143" +
                    "\1\0\7\143\1\0\16\143\1\153\6\143\17\0\1\143" +
                    "\1\0\7\143\1\0\14\143\1\154\10\143\17\0\1\155" +
                    "\1\0\7\155\1\0\25\155\17\0\1\155\1\0\7\155" +
                    "\1\0\16\155\1\156\6\155\17\0\1\155\1\0\7\155" +
                    "\1\0\14\155\1\157\10\155\17\0\1\155\1\0\7\155" +
                    "\1\0\11\155\1\160\13\155\17\0\1\155\1\0\7\155" +
                    "\1\0\14\155\1\161\10\155\17\0\1\155\1\0\7\155" +
                    "\1\0\5\155\1\162\17\155\17\0\1\155\1\0\7\155" +
                    "\1\0\4\155\1\162\20\155\17\0\1\155\1\0\7\155" +
                    "\1\0\14\155\1\162\10\155\17\0\1\155\1\0\7\155" +
                    "\1\0\7\155\1\162\15\155\17\0\1\163\1\0\7\163" +
                    "\1\0\25\163\17\0\1\163\1\0\7\163\1\0\1\163" +
                    "\1\164\23\163\17\0\1\163\1\0\7\163\1\0\20\163" +
                    "\1\165\4\163\17\0\1\163\1\0\7\163\1\0\14\163" +
                    "\1\166\10\163\17\0\1\163\1\0\7\163\1\0\21\163" +
                    "\1\166\3\163\17\0\1\167\1\0\7\167\1\0\25\167" +
                    "\17\0\1\167\1\0\7\167\1\0\24\167\1\170\17\0" +
                    "\1\167\1\0\7\167\1\0\5\167\1\171\17\167\17\0" +
                    "\1\167\1\0\7\167\1\0\5\167\1\170\17\167\17\0" +
                    "\1\172\1\0\7\172\1\0\25\172\17\0\1\172\1\0" +
                    "\7\172\1\0\7\172\1\173\15\172\17\0\1\174\1\0" +
                    "\7\174\1\0\25\174\17\0\1\174\1\0\7\174\1\0" +
                    "\5\174\1\175\17\174\17\0\1\176\1\0\7\176\1\0" +
                    "\25\176\17\0\1\176\1\0\7\176\1\0\16\176\1\177" +
                    "\6\176\17\0\1\200\1\0\7\200\1\0\25\200\17\0" +
                    "\1\201\1\0\7\201\1\0\25\201\17\0\1\202\1\0" +
                    "\7\202\1\0\25\202\17\0\1\203\1\0\7\203\1\0" +
                    "\25\203\17\0\1\204\1\0\7\204\1\0\25\204\17\0" +
                    "\1\205\1\0\7\205\1\0\25\205\17\0\1\206\1\0" +
                    "\7\206\1\0\25\206\17\0\1\207\1\0\7\207\1\0" +
                    "\25\207\17\0\1\210\1\0\7\210\1\0\25\210\17\0" +
                    "\1\211\1\0\7\211\1\0\25\211\17\0\1\212\1\0" +
                    "\7\212\1\0\25\212\17\0\1\213\1\0\7\213\1\0" +
                    "\25\213\17\0\1\214\1\0\7\214\1\0\25\214\17\0" +
                    "\1\215\1\0\7\215\1\0\25\215\17\0\1\216\1\0" +
                    "\7\216\1\0\25\216\17\0\1\217\1\0\7\217\1\0" +
                    "\25\217\17\0\1\220\1\0\7\220\1\0\25\220\17\0" +
                    "\1\221\1\0\7\221\1\0\25\221\17\0\1\222\1\0" +
                    "\7\222\1\0\25\222\17\0\1\223\1\0\7\223\1\0" +
                    "\25\223\1\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[5888];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Error code for "Unknown internal scanner error".
     */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    /**
     * Error code for "could not match input".
     */
    private static final int ZZ_NO_MATCH = 1;
    /**
     * Error code for "pushback value was too large".
     */
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /**
     * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
     * {@link #ZZ_PUSHBACK_2BIG} respectively.
     */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\3\11\2\1\2\11\27\1\2\11\1\1\2\0" +
                    "\1\1\2\0\25\1\2\11\1\0\1\1\1\0\1\11" +
                    "\21\1\2\11\74\1\1\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[147];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Input device.
     */
    private java.io.Reader zzReader;

    /**
     * Current state of the DFA.
     */
    private int zzState;

    /**
     * Current lexical state.
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
     * string.
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * Text position at the last accepting state.
     */
    private int zzMarkedPos;

    /**
     * Current text position in the buffer.
     */
    private int zzCurrentPos;

    /**
     * Marks the beginning of the {@link #yytext()} string in the buffer.
     */
    private int zzStartRead;

    /**
     * Marks the last character in the buffer, that has been read from input.
     */
    private int zzEndRead;

    /**
     * Whether the scanner is at the end of file.
     *
     * @see #yyatEOF
     */
    private boolean zzAtEOF;

    /**
     * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
     *
     * <p>When a lead/high surrogate has been read from the input stream into the final
     * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private int yycolumn;

    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;

    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /**
     * Whether the user-EOF-code has already been executed.
     */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;

    /* user code: */
    public String myString = "";
    public Token token;
    public boolean endl = false;
    public String value;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public DecafScanner(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false} iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException(
                    "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                } else {                    // There is room in the buffer for at least one more char
                    int c = zzReader.read();  // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true;
                    } else {
                        zzBuffer[zzEndRead++] = (char) c;
                    }
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input reader.
     *
     * @throws java.io.IOException if the reader could not be closed.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; // indicate end of file
        zzEndRead = zzStartRead; // invalidate buffer

        if (zzReader != null) {
            zzReader.close();
        }
    }


    /**
     * Resets the scanner to read from a new input stream.
     *
     * <p>Does not close the old reader.
     *
     * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
     * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
     *
     * <p>Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzEOFDone = false;
        yyResetPosition();
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Resets the input position.
     */
    private final void yyResetPosition() {
        zzAtBOL = true;
        zzAtEOF = false;
        zzCurrentPos = 0;
        zzMarkedPos = 0;
        zzStartRead = 0;
        zzEndRead = 0;
        zzFinalHighSurrogate = 0;
        yyline = 0;
        yycolumn = 0;
        yychar = 0L;
    }


    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    public final boolean yyatEOF() {
        return zzAtEOF;
    }


    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at the given position from the matched text.
     *
     * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
     * @return the character at {@code position}.
     */
    public final char yycharat(int position) {
        return zzBuffer[zzStartRead + position];
    }


    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     *
     * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
     * match-all fallback rule) this method will only be called with things that
     * "Can't Possibly Happen".
     *
     * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
     * scanner etc.).
     *
     * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the error message to display.
     */
    private static void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * <p>They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must not be greater than
     *               {@link #yylength()}.
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered
     * or an I/O-Error occurs.
     *
     * @return the next token.
     * @throws java.io.IOException if any I/O-Error occurs.
     */
    public Token tokenReader() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                {
                    return new Token("$");
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        yybegin(YYINITIAL);
                        return new Token(yytext(), TokenType.undefined);
                    }
                    // fall through
                    case 17:
                        break;
                    case 2: {
                        yybegin(YYINITIAL);
                    }
                    // fall through
                    case 18:
                        break;
                    case 3: {
                        yybegin(YYINITIAL);
                        endl = true;
                    }
                    // fall through
                    case 19:
                        break;
                    case 4: {
                        yybegin(YYINITIAL);
                        return new Token(yytext(), TokenType.op_punc);
                    }
                    // fall through
                    case 20:
                        break;
                    case 5: {
                        yybegin(STRING);
                        myString = "\"";
                    }
                    // fall through
                    case 21:
                        break;
                    case 6: {
                        yybegin(YYINITIAL);
                        value = yytext();
                        return new Token("icv", TokenType.integer);
                    }
                    // fall through
                    case 22:
                        break;
                    case 7: {
                        yybegin(YYINITIAL);
                        value = yytext();
                        return new Token("ident", TokenType.id);
                    }
                    // fall through
                    case 23:
                        break;
                    case 8: {
                        myString += yytext();
                    }
                    // fall through
                    case 24:
                        break;
                    case 9: {
                        yybegin(YYINITIAL);
                        myString += "\"";
                        value = myString;
                        return new Token("str", TokenType.str_char);
                    }
                    // fall through
                    case 25:
                        break;
                    case 10: {
                        return new Token(yytext(), TokenType.undefined);
                    }
                    // fall through
                    case 26:
                        break;
                    case 11: {
                        yybegin(YYINITIAL);
                        endl = true;
                        return new Token(yytext(), TokenType.comment);
                    }
                    // fall through
                    case 27:
                        break;
                    case 12: {
                        yybegin(YYINITIAL);
                        value = yytext();
                        return new Token("rcv", TokenType.real);
                    }
                    // fall through
                    case 28:
                        break;
                    case 13: {
                        yybegin(YYINITIAL);
                        return new Token(yytext(), TokenType.keyword);
                    }
                    // fall through
                    case 29:
                        break;
                    case 14: {
                        yybegin(YYINITIAL);
                        value = yytext();
                        return new Token("str", TokenType.str_char);
                    }
                    // fall through
                    case 30:
                        break;
                    case 15: {
                        yybegin(YYINITIAL);
                        return new Token(yytext(), TokenType.str_char);
                    }
                    // fall through
                    case 31:
                        break;
                    case 16: {
                        yybegin(YYINITIAL);
                        return new Token(yytext(), TokenType.comment);
                    }
                    // fall through
                    case 32:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

    /**
     * Runs the scanner on input files.
     * <p>
     * This is a standalone scanner, it will print any unmatched
     * text to System.out unchanged.
     *
     * @param argv the command line, contains the filenames to run
     *             the scanner on.
     */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java DecafScanner [ --encoding <name> ] <inputfile(s)>");
        } else {
            int firstFilePos = 0;
            String encodingName = "UTF-8";
            if (argv[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = argv[1];
                try {
                    // Side-effect: is encodingName valid?
                    java.nio.charset.Charset.forName(encodingName);
                } catch (Exception e) {
                    System.out.println("Invalid encoding '" + encodingName + "'");
                    return;
                }
            }
            for (int i = firstFilePos; i < argv.length; i++) {
                DecafScanner scanner = null;
                try {
                    java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
                    java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
                    scanner = new DecafScanner(reader);
                    while (!scanner.zzAtEOF) scanner.tokenReader();
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }


}
