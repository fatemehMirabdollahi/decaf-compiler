// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: Scanner.flex

package scanner;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class DecafScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\2\6\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\12\17\2\6\1\4\1\20"+
    "\1\4\2\0\1\21\7\22\1\23\2\22\1\24\1\22"+
    "\1\25\1\22\1\26\1\22\1\27\10\22\1\6\1\30"+
    "\2\6\1\31\1\0\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\22\1\43\1\44\1\45"+
    "\1\46\1\47\2\22\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\22\1\56\1\22\1\6\1\57\1\6\7\0"+
    "\1\1\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0"+
    "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\2\4\1\1"+
    "\1\4\1\6\2\4\1\7\21\10\1\4\1\11\1\12"+
    "\1\11\2\0\1\13\2\0\1\2\1\14\14\10\1\15"+
    "\10\10\1\16\1\13\1\0\1\16\1\0\1\2\12\10"+
    "\1\15\7\10\1\17\4\10\1\15\12\10\1\15\15\10"+
    "\1\15\7\10\1\15\6\10\1\15\24\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\140\0\140\0\220\0\300\0\140"+
    "\0\140\0\360\0\u0120\0\u0150\0\140\0\u0180\0\u01b0\0\u01e0"+
    "\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360"+
    "\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0"+
    "\0\u0510\0\u0540\0\140\0\140\0\u0570\0\u05a0\0\u05d0\0\u0600"+
    "\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900"+
    "\0\u06f0\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50"+
    "\0\u0a80\0\140\0\140\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70"+
    "\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\u0b70\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\140\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0ea0\0\u0f60"+
    "\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u10e0\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230"+
    "\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u12c0"+
    "\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u14d0"+
    "\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u15f0\0\u1620"+
    "\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920"+
    "\0\u1950\0\u1980\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\7\1\14\1\15\1\16\1\11\1\17\1\20"+
    "\1\7\4\21\1\22\1\23\1\24\2\3\1\21\1\25"+
    "\1\26\1\27\1\30\1\31\2\21\1\32\2\21\1\33"+
    "\1\34\1\21\1\35\1\36\1\37\1\21\1\40\1\41"+
    "\1\21\1\42\2\43\1\5\1\6\1\43\1\44\22\43"+
    "\1\45\27\43\62\0\1\5\75\0\1\11\46\0\1\11"+
    "\50\0\2\46\2\47\4\46\1\50\17\46\1\51\27\46"+
    "\12\0\1\11\5\0\1\11\53\0\1\11\3\0\1\11"+
    "\50\0\1\52\4\0\1\53\1\0\1\11\54\0\1\54"+
    "\1\0\1\20\57\0\1\55\1\0\7\55\1\0\26\55"+
    "\20\0\1\55\1\0\7\55\1\0\5\55\1\56\20\55"+
    "\20\0\1\55\1\0\7\55\1\0\17\55\1\57\6\55"+
    "\20\0\1\55\1\0\7\55\1\0\5\55\1\60\20\55"+
    "\20\0\1\55\1\0\7\55\1\0\16\55\1\61\1\62"+
    "\6\55\20\0\1\55\1\0\7\55\1\0\16\55\1\63"+
    "\7\55\20\0\1\55\1\0\7\55\1\0\16\55\1\64"+
    "\7\55\20\0\1\55\1\0\7\55\1\0\13\55\1\65"+
    "\12\55\20\0\1\55\1\0\7\55\1\0\1\55\1\66"+
    "\14\55\1\67\3\55\1\70\3\55\20\0\1\55\1\0"+
    "\7\55\1\0\6\55\1\71\6\55\1\72\10\55\20\0"+
    "\1\55\1\0\7\55\1\0\1\55\1\73\24\55\20\0"+
    "\1\55\1\0\7\55\1\0\5\55\1\74\20\55\20\0"+
    "\1\55\1\0\7\55\1\0\5\55\1\75\20\55\20\0"+
    "\1\55\1\0\7\55\1\0\21\55\1\76\4\55\20\0"+
    "\1\55\1\0\7\55\1\0\17\55\1\77\6\55\20\0"+
    "\1\55\1\0\7\55\1\0\16\55\1\100\7\55\20\0"+
    "\1\55\1\0\7\55\1\0\10\55\1\101\15\55\60\0"+
    "\1\11\5\0\1\43\2\0\1\43\22\0\1\43\1\0"+
    "\1\43\10\0\1\43\1\0\1\43\1\0\1\43\5\0"+
    "\10\47\1\102\57\47\1\103\47\47\10\0\1\102\47\0"+
    "\5\47\1\104\2\47\1\105\22\47\1\104\1\47\1\104"+
    "\10\47\1\104\1\47\1\104\1\47\1\104\5\47\11\52"+
    "\1\106\46\52\2\53\1\4\1\107\54\53\17\0\1\54"+
    "\57\0\1\110\1\0\7\110\1\0\26\110\20\0\1\110"+
    "\1\0\7\110\1\0\24\110\1\111\1\110\20\0\1\110"+
    "\1\0\7\110\1\0\11\110\1\112\14\110\20\0\1\110"+
    "\1\0\7\110\1\0\1\110\1\113\24\110\20\0\1\110"+
    "\1\0\7\110\1\0\16\110\1\114\7\110\20\0\1\110"+
    "\1\0\7\110\1\0\5\110\1\115\20\110\20\0\1\110"+
    "\1\0\7\110\1\0\15\110\1\116\10\110\20\0\1\110"+
    "\1\0\7\110\1\0\22\110\1\117\3\110\20\0\1\110"+
    "\1\0\7\110\1\0\20\110\1\120\5\110\20\0\1\110"+
    "\1\0\7\110\1\0\13\110\1\121\12\110\20\0\1\110"+
    "\1\0\7\110\1\0\17\110\1\122\6\110\20\0\1\110"+
    "\1\0\7\110\1\0\15\110\1\123\10\110\20\0\1\110"+
    "\1\0\7\110\1\0\21\110\1\122\4\110\20\0\1\110"+
    "\1\0\7\110\1\0\11\110\1\124\14\110\20\0\1\110"+
    "\1\0\7\110\1\0\24\110\1\122\1\110\20\0\1\110"+
    "\1\0\7\110\1\0\3\110\1\125\15\110\1\126\4\110"+
    "\20\0\1\110\1\0\7\110\1\0\17\110\1\127\6\110"+
    "\20\0\1\110\1\0\7\110\1\0\22\110\1\120\3\110"+
    "\20\0\1\110\1\0\7\110\1\0\11\110\1\130\14\110"+
    "\20\0\1\110\1\0\7\110\1\0\11\110\1\131\14\110"+
    "\1\0\10\47\1\132\47\47\10\0\1\132\47\0\11\52"+
    "\1\106\4\52\1\4\41\52\2\0\1\4\74\0\1\133"+
    "\1\0\7\133\1\0\26\133\20\0\1\133\1\0\1\134"+
    "\6\133\1\0\26\133\20\0\1\133\1\0\7\133\1\0"+
    "\15\133\1\135\10\133\20\0\1\133\1\0\7\133\1\0"+
    "\4\133\1\136\21\133\20\0\1\133\1\0\7\133\1\0"+
    "\13\133\1\137\12\133\20\0\1\133\1\0\7\133\1\0"+
    "\1\133\1\140\24\133\20\0\1\133\1\0\7\133\1\0"+
    "\21\133\1\141\4\133\20\0\1\133\1\0\7\133\1\0"+
    "\2\133\1\142\23\133\20\0\1\133\1\0\7\133\1\0"+
    "\5\133\1\137\20\133\20\0\1\133\1\0\7\133\1\0"+
    "\20\133\1\143\5\133\20\0\1\133\1\0\7\133\1\0"+
    "\3\133\1\144\22\133\20\0\1\133\1\0\7\133\1\0"+
    "\15\133\1\137\10\133\20\0\1\133\1\0\7\133\1\0"+
    "\16\133\1\145\7\133\20\0\1\133\1\0\7\133\1\0"+
    "\22\133\1\146\3\133\20\0\1\133\1\0\7\133\1\0"+
    "\11\133\1\147\14\133\20\0\1\133\1\0\7\133\1\0"+
    "\4\133\1\137\21\133\20\0\1\133\1\0\7\133\1\0"+
    "\13\133\1\143\12\133\20\0\1\150\1\0\7\150\1\0"+
    "\26\150\20\0\1\150\1\0\7\150\1\0\17\150\1\151"+
    "\6\150\20\0\1\150\1\0\7\150\1\0\21\150\1\152"+
    "\4\150\20\0\1\150\1\0\2\150\1\153\1\154\3\150"+
    "\1\0\26\150\20\0\1\150\1\0\7\150\1\0\12\150"+
    "\1\152\13\150\20\0\1\150\1\0\7\150\1\0\11\150"+
    "\1\155\14\150\20\0\1\150\1\0\7\150\1\0\13\150"+
    "\1\156\12\150\20\0\1\150\1\0\7\150\1\0\5\150"+
    "\1\152\20\150\20\0\1\150\1\0\7\150\1\0\21\150"+
    "\1\157\4\150\20\0\1\150\1\0\7\150\1\0\17\150"+
    "\1\160\6\150\20\0\1\150\1\0\7\150\1\0\17\150"+
    "\1\161\6\150\20\0\1\150\1\0\7\150\1\0\15\150"+
    "\1\162\10\150\20\0\1\163\1\0\7\163\1\0\26\163"+
    "\20\0\1\163\1\0\7\163\1\0\17\163\1\164\6\163"+
    "\20\0\1\163\1\0\7\163\1\0\15\163\1\165\10\163"+
    "\20\0\1\163\1\0\7\163\1\0\11\163\1\166\14\163"+
    "\20\0\1\163\1\0\7\163\1\0\15\163\1\167\10\163"+
    "\20\0\1\163\1\0\7\163\1\0\5\163\1\170\20\163"+
    "\20\0\1\163\1\0\7\163\1\0\11\163\1\171\14\163"+
    "\20\0\1\163\1\0\7\163\1\0\4\163\1\170\21\163"+
    "\20\0\1\163\1\0\7\163\1\0\15\163\1\170\10\163"+
    "\20\0\1\163\1\0\7\163\1\0\7\163\1\170\16\163"+
    "\20\0\1\172\1\0\7\172\1\0\26\172\20\0\1\172"+
    "\1\0\7\172\1\0\1\172\1\173\24\172\20\0\1\172"+
    "\1\0\7\172\1\0\21\172\1\174\4\172\20\0\1\172"+
    "\1\0\7\172\1\0\15\172\1\175\10\172\20\0\1\172"+
    "\1\0\7\172\1\0\22\172\1\175\3\172\20\0\1\172"+
    "\1\0\7\172\1\0\16\172\1\176\7\172\20\0\1\177"+
    "\1\0\7\177\1\0\26\177\20\0\1\177\1\0\7\177"+
    "\1\0\25\177\1\200\20\0\1\177\1\0\7\177\1\0"+
    "\5\177\1\201\20\177\20\0\1\177\1\0\7\177\1\0"+
    "\5\177\1\200\20\177\20\0\1\177\1\0\7\177\1\0"+
    "\15\177\1\200\10\177\20\0\1\202\1\0\7\202\1\0"+
    "\26\202\20\0\1\202\1\0\7\202\1\0\7\202\1\203"+
    "\16\202\20\0\1\204\1\0\7\204\1\0\26\204\20\0"+
    "\1\204\1\0\7\204\1\0\5\204\1\205\20\204\20\0"+
    "\1\206\1\0\7\206\1\0\26\206\20\0\1\206\1\0"+
    "\7\206\1\0\17\206\1\207\6\206\20\0\1\210\1\0"+
    "\7\210\1\0\26\210\20\0\1\211\1\0\7\211\1\0"+
    "\26\211\20\0\1\212\1\0\7\212\1\0\26\212\20\0"+
    "\1\213\1\0\7\213\1\0\26\213\20\0\1\214\1\0"+
    "\7\214\1\0\26\214\20\0\1\215\1\0\7\215\1\0"+
    "\26\215\20\0\1\216\1\0\7\216\1\0\26\216\20\0"+
    "\1\217\1\0\7\217\1\0\26\217\20\0\1\220\1\0"+
    "\7\220\1\0\26\220\20\0\1\221\1\0\7\221\1\0"+
    "\26\221\20\0\1\222\1\0\7\222\1\0\26\222\20\0"+
    "\1\223\1\0\7\223\1\0\26\223\20\0\1\224\1\0"+
    "\7\224\1\0\26\224\20\0\1\225\1\0\7\225\1\0"+
    "\26\225\20\0\1\226\1\0\7\226\1\0\26\226\20\0"+
    "\1\227\1\0\7\227\1\0\26\227\20\0\1\230\1\0"+
    "\7\230\1\0\26\230\20\0\1\231\1\0\7\231\1\0"+
    "\26\231\20\0\1\232\1\0\7\232\1\0\26\232\20\0"+
    "\1\233\1\0\7\233\1\0\26\233\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6576];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\2\1\2\11\3\1\1\11\25\1\2\11"+
    "\1\1\2\0\1\1\2\0\27\1\2\11\1\0\1\1"+
    "\1\0\23\1\1\11\100\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
public String myString = "";
Token token ;
public boolean endl =false;
public int lineNum = 1;
public static String value;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DecafScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token tokenReader() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return new Token("$");
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL);return new Token(yytext(),TokenType.undefined);
            }
            // fall through
          case 16: break;
          case 2:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 17: break;
          case 3:
            { yybegin(YYINITIAL);lineNum ++;endl=true;
            }
            // fall through
          case 18: break;
          case 4:
            { yybegin(YYINITIAL);return new Token(yytext(),TokenType.op_punc);
            }
            // fall through
          case 19: break;
          case 5:
            { yybegin(STRING);myString="\"";
            }
            // fall through
          case 20: break;
          case 6:
            { yybegin(YYINITIAL);return new Token("colon",TokenType.op_punc);
            }
            // fall through
          case 21: break;
          case 7:
            { yybegin(YYINITIAL);value = yytext();return new Token("icv",TokenType.integer);
            }
            // fall through
          case 22: break;
          case 8:
            { yybegin(YYINITIAL);value = yytext(); return new Token("ident",TokenType.id);
            }
            // fall through
          case 23: break;
          case 9:
            { myString+=yytext();
            }
            // fall through
          case 24: break;
          case 10:
            { yybegin(YYINITIAL); myString+="\""  ;value = myString; return new Token("str",TokenType.str_char);
            }
            // fall through
          case 25: break;
          case 11:
            { return new Token(yytext(),TokenType.undefined);
            }
            // fall through
          case 26: break;
          case 12:
            { yybegin(YYINITIAL);value = yytext();return new Token("rcv",TokenType.real);
            }
            // fall through
          case 27: break;
          case 13:
            { yybegin(YYINITIAL); return new Token(yytext(),TokenType.keyword);
            }
            // fall through
          case 28: break;
          case 14:
            { yybegin(YYINITIAL);value = yytext(); return new Token("str",TokenType.str_char);
            }
            // fall through
          case 29: break;
          case 15:
            { yybegin(YYINITIAL);return new Token(yytext() ,TokenType.str_char);
            }
            // fall through
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java DecafScanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        DecafScanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new DecafScanner(reader);
          while ( !scanner.zzAtEOF ) scanner.tokenReader();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
